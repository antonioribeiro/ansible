---

# root, if you have a different name for it, set it here

root_username: 'root'

# System Administrator - Ansible will create this user for you and give root (sudo) power to it
# If you don't need it to be created, just set system_administrator_name to ''
#
# generating the system administrator password, execute those steps. YOU HAVE TO replace SALT with your own salt string!
#
#     python -c 'import crypt; print crypt.crypt("password", "$6$SALT$")'

system_administrator_name: 'administrator'
system_administrator_comment: '"Administrator Full Name"'
system_administrator_uid: '9999'
system_administrator_password: '$6$SALT$3MUMz4cNIRjQ/Knnc3gXjJLV1vdwFs2nLvh//nGtEh/.li04NodZJSfnc4jeCVHd7kKHGnq5MsenN.tO6Z.Cj/'

# Hostname is important as we need to delete an anonymous MySQL
# user that is created with this name, make sure you match this
# up with the output of the command 'hostname' on the server.

server_hostname: '{{ ansible_hostname }}'

########
#
# Webserver general info
#

# Document root: where are you storing your pages?
webserver_document_root: '/var/www'

# Webserver user
webserver_username: 'www-data'

########
#
# Laravel 
#

# Where your Laravel site files should be stored?
laravel_document_root: '{{ webserver_document_root }}/laravel'

# Site base URL - http://localhost/ == '/'
laravel_site_base_url: '/'

##########################


# This is your main user, the one you used to login into the box and it must have sudo rights

user_with_sudo_power: 'YOUR-BOX-MAIN-USERNAME'

# general scripts folder

scripts_path: '/etc/scripts'

# temporary files folder

tmp_path: '/tmp'

# upstart folder

upstart_path: '/etc/init'

# reboot command

reboot_command: '/sbin/reboot'

# php.ini
php_max_execution_time: '90'
php_display_errors: 'On'
php_display_startup_errors: 'On'
php_html_errors: 'On'
php_post_max_size: '32M'
php_upload_max_filesize: '32M'
php_date_timezone: 'America/Sao_Paulo'

# apc.ini
apc_rfc1867: '1'
apc_shm_size: '256M'
apc_shm_segments: '1'
apc_num_files_hint: '0'

# my.cnf
mysql_max_allowed_packet: '128M'
mysql_character_set_server: 'utf8'
mysql_collation_server: 'utf8_general_ci'
innodb_file_per_table: 'innodb_file_per_table'

# mysql
mysql_root_username: $root_username
mysql_root_password: 'PASSWORD'
mysql_secondary_user: '' # keep it blank to not create a secondary user
mysql_secondary_password: 'PASSWORD'
mysql_phpmyadmin_password: 'PASSWORD'
mysql_configuration_path: '/etc/mysql'

# postgresql

# create password using
#   python -c 'import crypt; print crypt.crypt("password", "$1$2zB3D4a0Z$")'
# wich generates something like
#   $1$2zB3D4a0$oNfxJGHSNRlOzZpj6Cs8W/

postgresql_version: '9.1'
postgresql_user: 'postgres'
postgresql_user_password: 'password'
postgresql_user_password_hashed: '$1$2zB3D4a0$oNfxJGHSNRlOzZpj6Cs8W/'
postgresql_dbname: 'phpboxdev'
postgresql_dbuser: 'phpboxdev'
postgresql_dbpassword: 'phpboxdev'

# apache
apache_server_admin: 'webmaster@example.com'
apache_server_alias: '*.*.example.com'
apache_config_directory: '/etc/apache2'

# Node JS
node_version: 0.10.20 - http://nodejs.org/

# Grunt -- check for versions here: https://github.com/gruntjs/grunt/wiki
grunt_version: 0.4.1

# Composer

composer_executable: '/usr/bin/composer'

# Beanstalkd 

beanstalkd_server_hostname: '{{ ansible_hostname }}'
beanstalkd_server_port: '11300'

# PHPUnit

phpunit_directory: '/usr/share/phpunit'
phpunit_executable: '/usr/bin/phpunit'
phpunit_version: '3.7.*'

# Docker

docker_executable: '/usr/bin/docker'