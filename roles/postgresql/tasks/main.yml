---

####### look for installed stuff

- name: Detector | Check if nginx is installed
  shell: apt-cache policy nginx | grep Installed | grep -v "(none)"
  register: nginx
  ignore_errors: true
  tags:
    - postgresql
    - phppgadmin


- name: Detector | Check if apache2 is installed
  shell: apt-cache policy apache2 | grep Installed | grep -v "(none)"
  register: apache2
  ignore_errors: true
  tags:
    - postgresql
    - phppgadmin


########## Start

- name: PostgreSQL | Create user
  user:
    name={{ postgresql_system_user }}
    comment="PosgreSQL user"
    password={{ postgresql_system_user_password_hashed }}
    state=present
  tags: postgresql


- name: PostgreSQL | Installing apt-key
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc state=present
  tags: postgresql


- name: PostgreSQL | Installing apt package source
  apt_repository: repo="deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main" state=present
  tags: postgresql


- name: PostgreSQL | Install packages
  apt:
    pkg={{ item }}
    state=latest
  with_items:
     - postgresql-{{ postgresql_version }}
     - postgresql-client-{{ postgresql_version }}
     - python-psycopg2
     - php-pgsql
     - libpq-dev
  tags: postgresql


### phpPgAdmin

- name: PostgreSQL | phpPgAdmin | Install
  apt:
    pkg={{ item }}
    state=latest
  with_items:
     - phppgadmin
  register: phppgadmin
  tags:
    - postgresql
    - phppgadmin


- name: PostgreSQL | phpPgAdmin | Delete conf.d virtual host
  file:
    path={{ apache_config_directory }}/conf.d/phppgadmin
    state=absent
  when:
    apache2.rc == 0 # exists
  tags:
    - postgresql
    - phppgadmin


- name: PostgreSQL | phpPgAdmin | Configure virtual host
  template:
    src=phppgadmin.conf.tpl
    dest={{ apache_config_directory }}/sites-available/phppgadmin.conf
  when:
    apache2.rc == 0 # exists
  notify:
    - restart apache2
  tags:
    - postgresql
    - phppgadmin


- name: PostgreSQL | phpPgAdmin | Enable virtual host
  command:
    a2ensite phppgadmin
  when:
      apache2.rc == 0 # exists
  notify:
    - restart apache2
  tags:
    - postgresql
    - phppgadmin


- name: PostgreSQL | phpPgAdmin | Disable Extra Login Security
  shell:
    sed -i "s/\$conf\['extra_login_security'\] \= true\;/\$conf\['extra_login_security'\] \= false\;/g" /usr/share/phppgadmin/conf/config.inc.php
  tags:
    - postgresql
    - phppgadmin


- name: PostgreSQL | phpPgAdmin | Remove PHP end
  shell:
    sed -i "s/?>//g" /usr/share/phppgadmin/conf/config.inc.php
  tags:
    - postgresql
    - phppgadmin


- name: PostgreSQL | phpPgAdmin | Add error reporting directives
  shell:
    grep -q -e "error_reporting(E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED);" /usr/share/phppgadmin/conf/config.inc.php || echo "error_reporting(E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED);" >> /usr/share/phppgadmin/conf/config.inc.php
  tags:
    - postgresql
    - phppgadmin


# - name: PostgreSQL | Initiate database
#   command: sudo -u postgres /usr/lib/postgresql/9.1/bin/initdb
#             creates=/var/lib/pgsql/data/postgresql.conf
#   tags: postgresql

- name: PostgreSQL | Ensure PostgreSQL is listening on all localhost - 1
  lineinfile:
    dest=/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
    regexp='^#?listen_addresses\s*='
    line="listen_addresses = '*'"
    state=present
  notify:
    - restart postgresql
  tags: postgresql

- name: PostgreSQL | Ensure PostgreSQL is listening on all localhost - 2
  lineinfile:
    dest=/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
    regexp='host\s+all\s+all\s+127.0.0.1/32\s+md5'
    line='host all all  0.0.0.0/0 md5'
    insertbefore=BOF
  notify: restart postgresql
  tags: postgresql

### Add postgres to sudoers

- name: Copy sudoers file for safety
  command: cp -f /etc/sudoers /etc/sudoers.tmp
  tags: postgresql

- name: Create sudoers file backup
  command: cp -f /etc/sudoers /etc/sudoers.bak
  tags: postgresql

- name: make sure we can sudo as admin group
  lineinfile:
    dest=/etc/sudoers.tmp
    state=present
    regexp='^postgres'
    line='postgres ALL=(ALL) NOPASSWD:ALL'
  tags: postgresql

- name: Final sudoers file check
  shell: visudo -q -c -f /etc/sudoers.tmp && cp -f /etc/sudoers.tmp /etc/sudoers
  tags: postgresql

###

- name: PostgreSQL | ensure database is created
  postgresql_db:
    login_user={{ postgresql_system_user }}
    login_password={{ postgresql_system_user_password }}
    db={{ postgresql_db_name }}
  sudo_user: "{{ postgresql_system_user }}"
  sudo: True
  tags: postgresql

- name: PostgreSQL | ensure user has access to database
  postgresql_user:
    login_user={{ postgresql_system_user }}
    login_password={{ postgresql_system_user_password }}
    user={{ postgresql_db_user }}
    password={{ postgresql_db_password }}
    role_attr_flags=SUPERUSER,CREATEDB
    state=present
  sudo_user: "{{ postgresql_system_user }}"
  sudo: True
  tags: postgresql

### PostgreSQL Studio ()
###   http://www.postgresqlstudio.org/about/
###   https://bitbucket.org/openscg/pgstudio/src
###
###  NOT INSTALLED, IT'S A JSP APPLICATION

# - name: PostgreSQL | PostgreSQL Studio
#   git: repo=https://bitbucket.org/openscg/pgstudio.git dest={{ webserver_document_root }}/pgstudio
#   tags: postgresql

### get sudoers to its original config

- name: Create sudoers file backup
  command: cp -f /etc/sudoers.bak /etc/sudoers
  tags: postgresql

###

- name: PostgreSQL | Start database server and enable it at boot
  service:
    name=postgresql
    enabled=yes
    state=started
  tags: postgresql

- name: PostgreSQL | Restart Apache
  service:
    name=apache2
    state=restarted
  when:
    apache2.rc == 0 # exists
  tags: postgresql

